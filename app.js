require('dotenv').config()
const { Telegraf, Markup } = require('telegraf');
const { Pool } = require('pg');
const schedule = require('node-schedule');
const { Calendar } = require('calendar');
const path = require('path');


console.log('DB_USER:', process.env.DB_USER);
console.log('API_TOKEN:', process.env.API_TOKEN);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const logger = {
  info: (msg) => console.log(`${new Date().toISOString()} - INFO - ${msg}`),
  error: (msg) => console.error(`${new Date().toISOString()} - ERROR - ${msg}`),
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  user: process.env.DB_USER || 'postgres',
  host: 'localhost',
  database: 'menstrual_cycle',
  password: process.env.DB_PASSWORD || '1234',
  port: 5432,
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞
const API_TOKEN = process.env.API_TOKEN;
if (!API_TOKEN) {
  logger.error('API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}
const bot = new Telegraf(API_TOKEN);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
let scheduler = null;

// –ê–¥–º–∏–Ω—Å–∫–∏–π chat_id –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const ADMIN_CHAT_ID = '5915898367';

// –•—Ä–∞–Ω–µ–Ω–∏–µ message_id –¥–ª—è –∫–∞–∂–¥–æ–≥–æ chat_id
const messageIds = new Map();

// –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
const startMenu = () => {
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('–ù–∞—á–∞—Ç—å', 'begin')],
  ]);
  logger.info('–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ startMenu: ' + JSON.stringify(keyboard.reply_markup));
  return keyboard.reply_markup;
};

const mainMenu = async (ctx, user) => {
  const client = await pool.connect();
  try {
    const cycleResult = await client.query(
      'SELECT date FROM cycles WHERE user_id = $1 AND is_menstruation = true ORDER BY date DESC LIMIT 1',
      [user.id]
    );
    const hasPreviousCycle = cycleResult.rows.length > 0;
    const buttons = [
      [Markup.button.callback('üìç –ù–∞—á–∞–ª–æ –º–µ—Å—è—á–Ω—ã—Ö', 'start_period')],
      [Markup.button.callback('‚ù§Ô∏è –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ–ª–æ–≤–æ–π –∞–∫—Ç', 'sex')],
    ];
    if (hasPreviousCycle && !user.menstruation_active) {
      buttons.push([Markup.button.callback('üîÑ –°–Ω—è—Ç—å –æ—Ç–º–µ–Ω—É –º–µ—Å—è—á–Ω—ã—Ö', 'restore_period')]);
    }
    buttons.push([Markup.button.callback('üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å', 'calendar')]);
    return Markup.inlineKeyboard(buttons).reply_markup;
  } finally {
    client.release();
  }
};

const periodMenu = () =>
  Markup.inlineKeyboard([
    [Markup.button.callback('üóë –£–±—Ä–∞—Ç—å –æ—Ç–º–µ—Ç–∫—É –º–µ—Å—è—á–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è', 'remove_today_period')],
    [Markup.button.callback('‚ù§Ô∏è –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ–ª–æ–≤–æ–π –∞–∫—Ç', 'sex')],
    [Markup.button.callback('üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å', 'calendar')],
    [Markup.button.callback('üèÅ –ö–æ–Ω–µ—Ü –º–µ—Å—è—á–Ω—ã—Ö', 'end_period')],
  ]).reply_markup;

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const markDayMenu = (hasPeriodToday) =>
  Markup.inlineKeyboard([
    [Markup.button.callback(hasPeriodToday ? 'üóë –£–±—Ä–∞—Ç—å –æ—Ç–º–µ—Ç–∫—É –º–µ—Å—è—á–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è' : 'üìå –û—Ç–º–µ—Ç–∏—Ç—å –º–µ—Å—è—á–Ω—ã–µ', hasPeriodToday ? 'remove_today_period' : 'mark_day')],
    [Markup.button.callback('‚ù§Ô∏è –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ–ª–æ–≤–æ–π –∞–∫—Ç', 'sex')],
    [Markup.button.callback('üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å', 'calendar')],
    [Markup.button.callback('üèÅ –ö–æ–Ω–µ—Ü –º–µ—Å—è—á–Ω—ã—Ö', 'end_period')],
  ]).reply_markup;

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ –î–î.–ú–ú.–ì–ì–ì–ì
const formatDate = (date) => {
  const d = new Date(date);
  return `${d.getDate().toString().padStart(2, '0')}.${(d.getMonth() + 1).toString().padStart(2, '0')}.${d.getFullYear()}`;
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
bot.command('start', async (ctx) => {
  logger.info(`–û–±—Ä–∞–±–æ—Ç–∫–∞ /start –¥–ª—è chat_id: ${ctx.chat.id}`);
  const client = await pool.connect();
  try {
    const result = await client.query(
      'SELECT * FROM users WHERE chat_id = $1',
      [ctx.chat.id]
    );
    let user = result.rows[0];
    if (!user) {
      logger.info(`–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${ctx.chat.id}`);
      await client.query(
        'INSERT INTO users (chat_id, username, registration_date) VALUES ($1, $2, NOW())',
        [ctx.chat.id, ctx.from.username || '']
      );
      user = { chat_id: ctx.chat.id, username: ctx.from.username || '', menstruation_active: false };
      await bot.telegram.sendMessage(ADMIN_CHAT_ID, `–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! Chat ID: ${ctx.chat.id}`);
    }
    const reply = await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞!', {
      reply_markup: startMenu(),
    });
    messageIds.set(ctx.chat.id, reply.message_id);
    logger.info(`–û—Ç–≤–µ—Ç –Ω–∞ /start –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è chat_id: ${ctx.chat.id}, message_id: ${reply.message_id}`);
  } catch (err) {
    logger.error(`–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: ${err}`);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  } finally {
    client.release();
  }
});

bot.on('callback_query', async (ctx) => {
  const client = await pool.connect();
  try {
    const result = await client.query(
      'SELECT * FROM users WHERE chat_id = $1',
      [ctx.chat.id]
    );
    const user = result.rows[0];
    if (!user) {
      await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /start.');
      return;
    }

    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const callbackData = ctx.update.callback_query.data;
    const currentMessageId = ctx.update.callback_query.message.message_id;

    const prevMessageId = messageIds.get(ctx.chat.id);
    if (prevMessageId && callbackData !== 'sex' && callbackData !== 'calendar') {
      try {
        await bot.telegram.deleteMessage(ctx.chat.id, prevMessageId);
      } catch (err) {
        logger.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è ${prevMessageId}: ${err}`);
      }
    }

    if (callbackData === 'begin') {
      const reply = await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
        reply_markup: await mainMenu(ctx, user),
      });
      messageIds.set(ctx.chat.id, reply.message_id);
    } else if (callbackData === 'start_period') {
      await client.query(
        'UPDATE users SET menstruation_active = true WHERE chat_id = $1',
        [ctx.chat.id]
      );
      await client.query(
        'INSERT INTO cycles (user_id, date, is_menstruation) VALUES ($1, $2, $3)',
        [user.id, today, true]
      );
      schedule.scheduleJob(
        `notification_${ctx.chat.id}`,
        { hour: 9, minute: 0 },
        () => sendNotification(bot, ctx.chat.id)
      );
      const reply = await ctx.reply('–ú–µ—Å—è—á–Ω—ã–µ –Ω–∞—á–∞–ª–∏—Å—å. –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.', {
        reply_markup: periodMenu(),
      });
      messageIds.set(ctx.chat.id, reply.message_id);
    } else if (callbackData === 'mark_day') {
      if (user.menstruation_active) {
        await client.query(
          'INSERT INTO cycles (user_id, date, is_menstruation) VALUES ($1, $2, $3)',
          [user.id, today, true]
        );
        const reply = await ctx.reply('–î–µ–Ω—å –º–µ—Å—è—á–Ω—ã—Ö –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω.', { reply_markup: markDayMenu(true) });
        messageIds.set(ctx.chat.id, reply.message_id);
      }
    } else if (callbackData === 'remove_today_period') {
      const cycleResult = await client.query(
        'SELECT * FROM cycles WHERE user_id = $1 AND date = $2 AND is_menstruation = true',
        [user.id, today]
      );
      const cycle = cycleResult.rows[0];
      if (cycle) {
        await client.query(
          'DELETE FROM cycles WHERE id = $1',
          [cycle.id]
        );
        await client.query(
          'UPDATE users SET menstruation_active = false WHERE chat_id = $1',
          [ctx.chat.id]
        );
        schedule.cancelJob(`notification_${ctx.chat.id}`);
        const reply = await ctx.reply('–û—Ç–º–µ—Ç–∫–∞ –º–µ—Å—è—á–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è —É–¥–∞–ª–µ–Ω–∞.', {
          reply_markup: await mainMenu(ctx, user),
        });
        messageIds.set(ctx.chat.id, reply.message_id);
      } else {
        const reply = await ctx.reply('–ù–µ—Ç –æ—Ç–º–µ—Ç–∫–∏ –º–µ—Å—è—á–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è.', { reply_markup: periodMenu() });
        messageIds.set(ctx.chat.id, reply.message_id);
      }
    } else if (callbackData === 'restore_period') {
      const cycleResult = await client.query(
        'SELECT * FROM cycles WHERE user_id = $1 AND date = $2 AND is_menstruation = true',
        [user.id, today]
      );
      if (cycleResult.rows.length === 0) {
        await client.query(
          'INSERT INTO cycles (user_id, date, is_menstruation) VALUES ($1, $2, $3)',
          [user.id, today, true]
        );
        await client.query(
          'UPDATE users SET menstruation_active = true WHERE chat_id = $1',
          [ctx.chat.id]
        );
        schedule.scheduleJob(
          `notification_${ctx.chat.id}`,
          { hour: 9, minute: 0 },
          () => sendNotification(bot, ctx.chat.id)
        );
        const reply = await ctx.reply('–û—Ç–º–µ–Ω–∞ –º–µ—Å—è—á–Ω—ã—Ö —Å–Ω—è—Ç–∞. –ú–µ—Å—è—á–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.', {
          reply_markup: periodMenu(),
        });
        messageIds.set(ctx.chat.id, reply.message_id);
      } else {
        const reply = await ctx.reply('–ú–µ—Å—è—á–Ω—ã–µ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è.', { reply_markup: periodMenu() });
        messageIds.set(ctx.chat.id, reply.message_id);
      }
    } else if (callbackData === 'end_period') {
      if (user.menstruation_active) {
        await client.query(
          'INSERT INTO cycles (user_id, date, is_menstruation) VALUES ($1, $2, $3)',
          [user.id, today, true]
        );
        await client.query(
          'UPDATE users SET menstruation_active = false WHERE chat_id = $1',
          [ctx.chat.id]
        );
        schedule.cancelJob(`notification_${ctx.chat.id}`);
        const datesResult = await client.query(
          'SELECT date FROM cycles WHERE user_id = $1 AND is_menstruation = true ORDER BY date DESC',
          [user.id]
        );
        const dates = datesResult.rows.map(row => new Date(row.date));
        const cycleLength = dates.length >= 2 ? (dates[0] - dates[1]) / (1000 * 60 * 60 * 24) : 28;
        const nextPeriod = new Date(dates[0].getTime() + cycleLength * 24 * 60 * 60 * 1000);
        const ovulation = new Date(dates[0].getTime() + (cycleLength / 2) * 24 * 60 * 60 * 1000);
        const reply = await ctx.reply(
          `–ú–µ—Å—è—á–Ω—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.\n` +
          `–°–ª–µ–¥—É—é—â–∏–µ –º–µ—Å—è—á–Ω—ã–µ: —á–µ—Ä–µ–∑ ${Math.round((nextPeriod - today) / (1000 * 60 * 60 * 24))} –¥–Ω–µ–π ‚Äî ${formatDate(nextPeriod)}\n` +
          `–û–≤—É–ª—è—Ü–∏—è: —á–µ—Ä–µ–∑ ${Math.round((ovulation - today) / (1000 * 60 * 60 * 24))} –¥–Ω–µ–π ‚Äî ${formatDate(ovulation)}`,
          { reply_markup: await mainMenu(ctx, user) }
        );
        messageIds.set(ctx.chat.id, reply.message_id);
      } else {
        const reply = await ctx.reply('–ú–µ—Å—è—á–Ω—ã–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã.', { reply_markup: await mainMenu(ctx, user) });
        messageIds.set(ctx.chat.id, reply.message_id);
      }
    } else if (callbackData === 'sex') {
      await client.query(
        'INSERT INTO sexual_activities (user_id, date) VALUES ($1, $2)',
        [user.id, today]
      );
      const reply = await ctx.reply('–ü–æ–ª–æ–≤–æ–π –∞–∫—Ç –æ—Ç–º–µ—á–µ–Ω ‚ù§Ô∏è', {
        reply_markup: user.menstruation_active ? periodMenu() : await mainMenu(ctx, user),
      });
      messageIds.set(ctx.chat.id, reply.message_id);
    } else if (callbackData === 'calendar') {
      const cyclesResult = await client.query(
        'SELECT * FROM cycles WHERE user_id = $1',
        [user.id]
      );
      const allCycles = cyclesResult.rows;
      const now = new Date();
      now.setHours(0, 0, 0, 0);
      const cal = new Calendar();
      const currentMonthMatrix = cal.monthDays(now.getFullYear(), now.getMonth());
      const nextMonthMatrix = cal.monthDays(now.getFullYear(), now.getMonth() + 1);

      let visual = `–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞ ${now.toLocaleString('ru-RU', { month: 'long', year: 'numeric' })}:\n–ø–Ω –≤—Ç —Å—Ä —á—Ç –ø—Ç —Å–± –≤—Å\n`;
      const daysCurrent = {};
      allCycles.forEach(c => {
        const date = new Date(c.date);
        const cycleDay = date.getDate();
        const cycleMonth = date.getMonth();
        const cycleYear = date.getFullYear();
        if (c.is_menstruation && cycleMonth === now.getMonth() && cycleYear === now.getFullYear()) {
          daysCurrent[cycleDay] = '‚óæÔ∏è';
        }
      });

      const ovDaysCurrent = new Set();
      if (allCycles.length >= 2) {
        const sortedDates = allCycles
          .filter(c => c.is_menstruation)
          .map(c => new Date(c.date))
          .sort((a, b) => b - a);
        const d1 = sortedDates[0];
        const d2 = sortedDates[1];
        const avgCycle = (d1 - d2) / (1000 * 60 * 60 * 24);
        const ovDay = new Date(d1.getTime() + (avgCycle / 2) * 24 * 60 * 60 * 1000);
        if (ovDay.getMonth() === now.getMonth() && ovDay.getFullYear() === now.getFullYear()) {
          ovDaysCurrent.add(ovDay.getDate());
        }
        const nextPeriod = new Date(d1.getTime() + avgCycle * 24 * 60 * 60 * 1000);
        const nextOvulation = new Date(d1.getTime() + (avgCycle / 2 + avgCycle) * 24 * 60 * 60 * 1000);
        if (nextPeriod.getMonth() === now.getMonth() && nextPeriod.getFullYear() === now.getFullYear()) {
          daysCurrent[nextPeriod.getDate()] = '‚óæÔ∏è';
        }
        if (nextOvulation.getMonth() === now.getMonth() + 1 && nextOvulation.getFullYear() === now.getFullYear()) {
          ovDaysCurrent.add(nextOvulation.getDate());
        }
      }

      currentMonthMatrix.forEach(week => {
        let line = '';
        week.forEach(day => {
          if (day === 0) {
            line += '   ';
          } else if (ovDaysCurrent.has(day)) {
            line += `üîª${day.toString().padStart(2, '0')}`;
          } else if (daysCurrent[day]) {
            line += `${daysCurrent[day]}${day.toString().padStart(2, '0')}`;
          } else {
            line += `‚ñ´Ô∏è${day.toString().padStart(2, '0')}`;
          }
          line += ' ';
        });
        visual += line + '\n';
      });

      const nextMonth = new Date(now.getFullYear(), now.getMonth() + 1, 1);
      visual += `\n–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞ ${nextMonth.toLocaleString('ru-RU', { month: 'long', year: 'numeric' })}:\n–ø–Ω –≤—Ç —Å—Ä —á—Ç –ø—Ç —Å–± –≤—Å\n`;
      const daysNext = {};
      const ovDaysNext = new Set();
      if (allCycles.length >= 2) {
        const sortedDates = allCycles
          .filter(c => c.is_menstruation)
          .map(c => new Date(c.date))
          .sort((a, b) => b - a);
        const d1 = sortedDates[0];
        const d2 = sortedDates[1];
        const avgCycle = (d1 - d2) / (1000 * 60 * 60 * 24);
        const nextPeriod = new Date(d1.getTime() + avgCycle * 24 * 60 * 60 * 1000);
        const nextOvulation = new Date(d1.getTime() + (avgCycle / 2 + avgCycle) * 24 * 60 * 60 * 1000);
        if (nextPeriod.getMonth() === now.getMonth() + 1 && nextPeriod.getFullYear() === now.getFullYear()) {
          daysNext[nextPeriod.getDate()] = '‚óæÔ∏è';
        }
        if (nextOvulation.getMonth() === now.getMonth() + 1 && nextOvulation.getFullYear() === now.getFullYear()) {
          ovDaysNext.add(nextOvulation.getDate());
        }
      }

      nextMonthMatrix.forEach(week => {
        let line = '';
        week.forEach(day => {
          if (day === 0) {
            line += '   ';
          } else if (ovDaysNext.has(day)) {
            line += `üîª${day.toString().padStart(2, '0')}`;
          } else if (daysNext[day]) {
            line += `${daysNext[day]}${day.toString().padStart(2, '0')}`;
          } else {
            line += `‚ñ´Ô∏è${day.toString().padStart(2, '0')}`;
          }
          line += ' ';
        });
        visual += line + '\n';
      });

      visual += '‚ñ´Ô∏è - –û–±—ã—á–Ω—ã–π –¥–µ–Ω—å\n‚óæÔ∏è - –ú–µ—Å—è—á–Ω—ã–µ\nüîª - –û–≤—É–ª—è—Ü–∏—è';
      const reply = await ctx.reply(visual, { reply_markup: user.menstruation_active ? periodMenu() : await mainMenu(ctx, user) });
      messageIds.set(ctx.chat.id, reply.message_id);
    }

    await ctx.answerCallbackQuery();
  } catch (err) {
    logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: ${err}`);
  } finally {
    client.release();
  }
});

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
const sendNotification = async (bot, chatId) => {
  const client = await pool.connect();
  try {
    const result = await client.query(
      'SELECT * FROM users WHERE chat_id = $1',
      [chatId]
    );
    const user = result.rows[0];
    if (user && user.menstruation_active) {
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const cycleResult = await client.query(
        'SELECT * FROM cycles WHERE user_id = $1 AND date = $2 AND is_menstruation = true',
        [user.id, today]
      );
      const hasPeriodToday = cycleResult.rows.length > 0;
      const reply = await bot.telegram.sendMessage(
        chatId,
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–º–µ—Ç—å—Ç–µ —Å—Ç–∞—Ç—É—Å –º–µ—Å—è—á–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è:',
        { reply_markup: markDayMenu(hasPeriodToday) }
      );
      messageIds.set(chatId, reply.message_id);
    }
  } finally {
    client.release();
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const onStartup = async () => {
  const client = await pool.connect();
  try {
    await client.query(`
      CREATE TABLE IF NOT EXISTS users (
        id BIGSERIAL PRIMARY KEY,
        chat_id BIGINT UNIQUE NOT NULL,
        username VARCHAR,
        menstruation_active BOOLEAN DEFAULT FALSE,
        registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
      CREATE TABLE IF NOT EXISTS cycles (
        id SERIAL PRIMARY KEY,
        user_id BIGINT REFERENCES users(id),
        date DATE NOT NULL,
        is_menstruation BOOLEAN DEFAULT FALSE
      );
      CREATE TABLE IF NOT EXISTS sexual_activities (
        id SERIAL PRIMARY KEY,
        user_id BIGINT REFERENCES users(id),
        date DATE NOT NULL
      );
    `);
    logger.info('–¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');

    scheduler = schedule;
    logger.info('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  } catch (err) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: ${err}`);
  } finally {
    client.release();
  }
};

// –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
const main = async () => {
  try {
    await bot.telegram.deleteWebhook({ drop_pending_updates: true });
    logger.info('Webhook —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω');
  } catch (err) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: ${err}`);
  }
  await onStartup();
  bot.launch();
  logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
};

main().catch(err => logger.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: ${err}`));